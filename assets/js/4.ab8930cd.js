(window.webpackJsonp=window.webpackJsonp||[]).push([[4],{205:function(t,s,n){"use strict";n.r(s);var a=n(0),e=Object(a.a)({},function(){var t=this,s=t.$createElement,n=t._self._c||s;return n("div",{staticClass:"content"},[t._m(0),t._v(" "),n("table",[t._m(1),t._v(" "),n("tbody",[n("tr",[n("td",[t._v("master")]),t._v(" "),n("td",[n("a",{attrs:{href:"https://circleci.com/gh/matusnovak/simplesquirrel/tree/master",target:"_blank",rel:"noopener noreferrer"}},[n("img",{attrs:{src:"https://circleci.com/gh/matusnovak/simplesquirrel/tree/master.svg?style=svg",alt:"CircleCI"}}),n("OutboundLink")],1)]),t._v(" "),n("td",[n("a",{attrs:{href:"https://travis-ci.org/matusnovak/simplesquirrel",target:"_blank",rel:"noopener noreferrer"}},[n("img",{attrs:{src:"https://travis-ci.org/matusnovak/simplesquirrel.svg?branch=master",alt:"Build Status"}}),n("OutboundLink")],1)]),t._v(" "),n("td",[n("a",{attrs:{href:"https://ci.appveyor.com/project/matusnovak/simplesquirrel/branch/devel",target:"_blank",rel:"noopener noreferrer"}},[n("img",{attrs:{src:"https://ci.appveyor.com/api/projects/status/hk9m6f62csx8llvy/branch/master?svg=true",alt:"Build status"}}),n("OutboundLink")],1)])]),t._v(" "),n("tr",[n("td",[t._v("devel")]),t._v(" "),n("td",[n("a",{attrs:{href:"https://circleci.com/gh/matusnovak/simplesquirrel/tree/devel",target:"_blank",rel:"noopener noreferrer"}},[n("img",{attrs:{src:"https://circleci.com/gh/matusnovak/simplesquirrel/tree/devel.svg?style=svg",alt:"CircleCI"}}),n("OutboundLink")],1)]),t._v(" "),n("td",[n("a",{attrs:{href:"https://travis-ci.org/matusnovak/simplesquirrel",target:"_blank",rel:"noopener noreferrer"}},[n("img",{attrs:{src:"https://travis-ci.org/matusnovak/simplesquirrel.svg?branch=devel",alt:"Build Status"}}),n("OutboundLink")],1)]),t._v(" "),n("td",[n("a",{attrs:{href:"https://ci.appveyor.com/project/matusnovak/simplesquirrel/branch/devel",target:"_blank",rel:"noopener noreferrer"}},[n("img",{attrs:{src:"https://ci.appveyor.com/api/projects/status/hk9m6f62csx8llvy/branch/devel?svg=true",alt:"Build status"}}),n("OutboundLink")],1)])])])]),t._v(" "),t._m(2),t._v(" "),n("p",[t._v("Yet another simple binding in C++11 for "),n("a",{attrs:{href:"http://www.squirrel-lang.org/",target:"_blank",rel:"noopener noreferrer"}},[t._v("Squirrel scripting language"),n("OutboundLink")],1)]),t._v(" "),n("p",[t._v("API Documentation can be found here: "),n("a",{attrs:{href:"https://matusnovak.github.io/simplesquirrel/doxygen/group__simplesquirrel.html",target:"_blank",rel:"noopener noreferrer"}},[t._v("https://matusnovak.github.io/simplesquirrel/doxygen/group__simplesquirrel.html"),n("OutboundLink")],1)]),t._v(" "),t._m(3),t._v(" "),t._m(4),t._v(" "),t._m(5),t._v(" "),n("p",[t._v("You can "),n("a",{attrs:{href:"https://github.com/matusnovak/simplesquirrel/releases",target:"_blank",rel:"noopener noreferrer"}},[t._v("use one of the automatically built releases from GitHub Releases"),n("OutboundLink")],1),t._v(" or compile it manually by following the "),n("router-link",{attrs:{to:"./INSTALL.html"}},[t._v("Install Guide")])],1),t._v(" "),t._m(6),t._v(" "),t._m(7),t._v(" "),t._m(8),t._m(9),t._v(" "),t._m(10),t._v(" "),t._m(11),t._m(12),t._v(" "),t._m(13),t._v(" "),t._m(14),t._v(" "),n("p",[t._v("Here are the C++ types and their Squirrel equivalents:")]),t._v(" "),t._m(15),t._v(" "),t._m(16),t._v(" "),t._m(17),t._v(" "),t._m(18),t._v(" "),t._m(19),t._v(" "),t._m(20),t._v(" "),n("p",[t._v("For example, the following code will return copy of the instance inside of Squirrel:")]),t._v(" "),t._m(21),n("p",[t._v("However the following will return pointer to the instance, no copy performed:")]),t._v(" "),t._m(22),n("p",[t._v("Here is an example how to handle return value from function call:")]),t._v(" "),t._m(23),t._m(24),t._v(" "),n("p",[t._v("Binding C++ functions is simple as described below. The functions will be added\ninto the root table and can be used across all scripts compiled within the VM.\nThe function arguments are deduced at compile time. No std::tuple, no std::any,\njust good old metaprogramming.")]),t._v(" "),t._m(25),t._m(26),t._v(" "),t._m(27),t._v(" "),t._m(28),t._m(29),t._v(" "),t._m(30),t._v(" "),t._m(31),t._v(" "),t._m(32),t._m(33),t._v(" "),n("p",[t._v("Sometimes, it is possible that your class has for example two methods:")]),t._v(" "),t._m(34),n("p",[t._v("One gets to be used when you have constant reference (or pointer) and the second one\nwhen you have non-constant reference. Binding these methods to Squirrel class can\ncause compiler ambiguity error. You can solve the problem by explicitly defining the\ntemplate when binding those functions, for example:")]),t._v(" "),t._m(35),t._m(36),t._v(" "),n("p",[t._v("Finding classes and creating instances is easy as the following code below.\nIt is self explanatory.")]),t._v(" "),t._m(37),t._m(38),t._v(" "),t._m(39),t._m(40),t._v(" "),t._m(41),t._m(42),t._v(" "),t._m(43),t._v(" "),t._m(44),n("p",[t._v("And then inside of Squirrel:")]),t._v(" "),t._m(45),t._m(46),t._v(" "),t._m(47),t._m(48)])},[function(){var t=this.$createElement,s=this._self._c||t;return s("h1",{attrs:{id:"simplesquirrel"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#simplesquirrel","aria-hidden":"true"}},[this._v("#")]),this._v(" SimpleSquirrel")])},function(){var t=this.$createElement,s=this._self._c||t;return s("thead",[s("tr",[s("th"),this._v(" "),s("th",[this._v("CircleCI")]),this._v(" "),s("th",[this._v("TravisCI")]),this._v(" "),s("th",[this._v("AppVeyor")])])])},function(){var t=this.$createElement,s=this._self._c||t;return s("p",[s("em",[this._v("The following compilers are tested in the CI above: Visual Studio 2015, Visual Studio 2015 Win64, Visual Studio 2017, Visual Studio 2017 Win64, MinGW-w64 i686, MinGW-w64 x86_64, Linux GCC 5.5.0, Linux GCC 6.4.0, Linux GCC 7.3.0, Linux GCC 8.2.0, and OSX Clang 3.7")])])},function(){var t=this.$createElement,s=this._self._c||t;return s("h2",{attrs:{id:"features"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#features","aria-hidden":"true"}},[this._v("#")]),this._v(" Features")])},function(){var t=this,s=t.$createElement,n=t._self._c||s;return n("ul",[n("li",[t._v("MIT licensed")]),t._v(" "),n("li",[t._v("32 and 64 bit support")]),t._v(" "),n("li",[t._v("C++11")]),t._v(" "),n("li",[t._v("Supports multiple virtual machines")]),t._v(" "),n("li",[t._v("Supports lambdas")]),t._v(" "),n("li",[t._v("Works on Windows (Visual Studio 2015 or newer) (or MinGW 4.9 or newer)")]),t._v(" "),n("li",[t._v("Works on Linux (GCC 4.9 or newer)")]),t._v(" "),n("li",[t._v("Works on OSX (Clang 3.7 or newer)")]),t._v(" "),n("li",[t._v("Very easy object manipulation")]),t._v(" "),n("li",[t._v("Supports binding of C++ classes to multiple instances of Squirrel VM")]),t._v(" "),n("li",[t._v("Strict type checking on C++ side")]),t._v(" "),n("li",[t._v("wchar_t support, a.k.a Squirrel Unicode (experimental!) - I highly recommend using UTF8 as chars and not UNICODE as wchar_t")]),t._v(" "),n("li",[t._v("Works with Visual Studio 2015, Visual Studio 2017, MinGW-w64, Linux GCC, and OSX Clang")]),t._v(" "),n("li",[t._v("Allows the following:\n"),n("ul",[n("li",[t._v("Binding C++ function and calling it from Squirrel")]),t._v(" "),n("li",[t._v("Looking up Squirrel function and calling it from C++")]),t._v(" "),n("li",[t._v("Looking up Squirrel classes and creating instances on C++ side")]),t._v(" "),n("li",[t._v("Binding C++ classes including methods and member variables")]),t._v(" "),n("li",[t._v("Passing any C++ pointer as either instance or userpointer (depends if your C++ has been exposed to VM)")]),t._v(" "),n("li",[t._v("Creating enumerations")]),t._v(" "),n("li",[t._v("Creating and passing tables")]),t._v(" "),n("li",[t._v("Creating and passing arrays")])])]),t._v(" "),n("li",[n("strong",[t._v("The following is not yet implemented:")]),t._v(" "),n("ul",[n("li",[t._v("Method overloading")]),t._v(" "),n("li",[t._v("Derivate Squirrel class")]),t._v(" "),n("li",[n("strong",[t._v("Thread safety")])])])])])},function(){var t=this.$createElement,s=this._self._c||t;return s("h2",{attrs:{id:"installation"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#installation","aria-hidden":"true"}},[this._v("#")]),this._v(" Installation")])},function(){var t=this.$createElement,s=this._self._c||t;return s("h2",{attrs:{id:"create-squirrel-vm"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#create-squirrel-vm","aria-hidden":"true"}},[this._v("#")]),this._v(" Create Squirrel VM")])},function(){var t=this.$createElement,s=this._self._c||t;return s("p",[this._v("Creating VM is done via its constructor. The VM will be destroyed\nonce it falls out of scope. Or, if you have created it via "),s("code",[this._v("new")]),this._v(" operator,\nit will be destroyed, and all of its resources, once you call "),s("code",[this._v("delete")]),this._v(".")])},function(){var t=this,s=t.$createElement,n=t._self._c||s;return n("div",{staticClass:"language-cpp extra-class"},[n("pre",{pre:!0,attrs:{class:"language-cpp"}},[n("code",[n("span",{pre:!0,attrs:{class:"token macro property"}},[t._v("#"),n("span",{pre:!0,attrs:{class:"token directive keyword"}},[t._v("include")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token string"}},[t._v("<simplesquirrel/simplesquirrel.hpp>")])]),t._v("\n\n"),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("main")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// Create and register Squirrel std libraries")]),t._v("\n    "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// More here: http://squirrel-lang.org/squirreldoc/stdlib/index.html")]),t._v("\n    ssq"),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("::")]),t._v("VM "),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("vm")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("1024")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" ssq"),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("::")]),t._v("Libs"),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("::")]),t._v("STRING "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("|")]),t._v(" ssq"),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("::")]),t._v("Libs"),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("::")]),t._v("IO "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("|")]),t._v(" ssq"),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("::")]),t._v("Libs"),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("::")]),t._v("MATH"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n    "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// Available flags:")]),t._v("\n    "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// NONE")]),t._v("\n    "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// IO")]),t._v("\n    "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// BLOB")]),t._v("\n    "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// MATH")]),t._v("\n    "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// SYSTEM")]),t._v("\n    "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// STRING")]),t._v("\n    "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// ALL")]),t._v("\n\n    "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])])},function(){var t=this.$createElement,s=this._self._c||t;return s("h2",{attrs:{id:"compile-script"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#compile-script","aria-hidden":"true"}},[this._v("#")]),this._v(" Compile script")])},function(){var t=this.$createElement,s=this._self._c||t;return s("p",[this._v("Compiling script can be done via raw source "),s("code",[this._v("const char*")]),this._v(" or via path to source\nfile.")])},function(){var t=this,s=t.$createElement,n=t._self._c||s;return n("div",{staticClass:"language-cpp extra-class"},[n("pre",{pre:!0,attrs:{class:"language-cpp"}},[n("code",[n("span",{pre:!0,attrs:{class:"token macro property"}},[t._v("#"),n("span",{pre:!0,attrs:{class:"token directive keyword"}},[t._v("include")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token string"}},[t._v("<simplesquirrel/simplesquirrel.hpp>")])]),t._v("\n\n"),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("main")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    ssq"),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("::")]),t._v("VM "),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("vm")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("1024")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" ssq"),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("::")]),t._v("Libs"),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("::")]),t._v("ALL"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n    ssq"),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("::")]),t._v("Script scriptA "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" vm"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("compileSource")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("/* raw char array here */")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    ssq"),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("::")]),t._v("Script scriptB "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" vm"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("compileFile")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("/* path to source file */")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n    "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])])},function(){var t=this.$createElement,s=this._self._c||t;return s("h2",{attrs:{id:"squirrel-object-manipulation"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#squirrel-object-manipulation","aria-hidden":"true"}},[this._v("#")]),this._v(" Squirrel object manipulation")])},function(){var t=this,s=t.$createElement,n=t._self._c||s;return n("p",[t._v("All Squirrel objects are dynamic and they can hold any value, no static typing. Since C++\nis statically typed, we need to check the type returned. You can do so by calling "),n("code",[t._v("ssq::Object::getType()")]),t._v("\nwhich returns "),n("code",[t._v("ssq::Type")]),t._v(" enum. The object can be: instance, class, function (closure), integer, float,\nstring, boolean, userdata, userpointer, array, table, and null. You can convert the raw object to\nany type using "),n("code",[t._v("ssq::Object::toXyz();")]),t._v(" such as: "),n("code",[t._v("toInt()")]),t._v(", "),n("code",[t._v("toFloat()")]),t._v(", "),n("code",[t._v("toString()")]),t._v(", "),n("code",[t._v("toBool()")]),t._v(",\n"),n("code",[t._v("toTable()")]),t._v(", "),n("code",[t._v("toArray()")]),t._v(", "),n("code",[t._v("toClass()")]),t._v(", "),n("code",[t._v("toInstance()")]),t._v(", and "),n("code",[t._v("toFunction()")]),t._v(". To check if the object is\nempty use "),n("code",[t._v("isEmpty()")]),t._v(" method and to check if the object is null use "),n("code",[t._v("isNull()")]),t._v(". Note that object being\nnull is not the same as object being empty! However, it is impossible for Squirrel to use empty objects\nso you will most likely never use "),n("code",[t._v("isEmpty()")]),t._v(", only "),n("code",[t._v("isNull()")]),t._v(".")])},function(){var t=this.$createElement,s=this._self._c||t;return s("p",[s("strong",[this._v("Always use std::string when calling Squirrel function or when casting the result of function\ncall from ssq::Object to string. Do not use const char* as those two types are different.")])])},function(){var t=this,s=t.$createElement,n=t._self._c||s;return n("table",[n("thead",[n("tr",[n("th",[t._v("C++")]),t._v(" "),n("th",[t._v("Squirrel")]),t._v(" "),n("th",[t._v("Method to convert back")])])]),t._v(" "),n("tbody",[n("tr",[n("td",[t._v("signed char")]),t._v(" "),n("td",[t._v("integer")]),t._v(" "),n("td",[n("code",[t._v("toInt()")])])]),t._v(" "),n("tr",[n("td",[t._v("unsigned char")]),t._v(" "),n("td",[t._v("integer")]),t._v(" "),n("td",[n("code",[t._v("toInt()")])])]),t._v(" "),n("tr",[n("td",[t._v("char")]),t._v(" "),n("td",[t._v("integer")]),t._v(" "),n("td",[n("code",[t._v("toInt()")])])]),t._v(" "),n("tr",[n("td",[t._v("short")]),t._v(" "),n("td",[t._v("integer")]),t._v(" "),n("td",[n("code",[t._v("toInt()")])])]),t._v(" "),n("tr",[n("td",[t._v("unsigned short")]),t._v(" "),n("td",[t._v("integer")]),t._v(" "),n("td",[n("code",[t._v("toInt()")])])]),t._v(" "),n("tr",[n("td",[t._v("int")]),t._v(" "),n("td",[t._v("integer")]),t._v(" "),n("td",[n("code",[t._v("toInt()")])])]),t._v(" "),n("tr",[n("td",[t._v("unsigned int")]),t._v(" "),n("td",[t._v("integer")]),t._v(" "),n("td",[n("code",[t._v("toInt()")])])]),t._v(" "),n("tr",[n("td",[t._v("long")]),t._v(" "),n("td",[t._v("integer")]),t._v(" "),n("td",[n("code",[t._v("toInt()")])])]),t._v(" "),n("tr",[n("td",[t._v("unsigned long")]),t._v(" "),n("td",[t._v("integer")]),t._v(" "),n("td",[n("code",[t._v("toInt()")])])]),t._v(" "),n("tr",[n("td",[t._v("long long (64-bit)")]),t._v(" "),n("td",[t._v("integer")]),t._v(" "),n("td",[n("code",[t._v("toInt()")])])]),t._v(" "),n("tr",[n("td",[t._v("long long (32-bit)")]),t._v(" "),n("td",[t._v("userdata")]),t._v(" "),n("td",[n("code",[t._v("to<long long>()")])])]),t._v(" "),n("tr",[n("td",[t._v("unsigned long long (64-bit)")]),t._v(" "),n("td",[t._v("integer")]),t._v(" "),n("td",[n("code",[t._v("toInt()")])])]),t._v(" "),n("tr",[n("td",[t._v("unsigned long long (64-bit)")]),t._v(" "),n("td",[t._v("userdata")]),t._v(" "),n("td",[n("code",[t._v("to<unsigned long long>()")])])]),t._v(" "),n("tr",[n("td",[t._v("std::string")]),t._v(" "),n("td",[t._v("string")]),t._v(" "),n("td",[n("code",[t._v("toString()")])])]),t._v(" "),n("tr",[n("td",[t._v("float")]),t._v(" "),n("td",[t._v("float")]),t._v(" "),n("td",[n("code",[t._v("toFloat()")])])]),t._v(" "),n("tr",[n("td",[t._v("double")]),t._v(" "),n("td",[t._v("float")]),t._v(" "),n("td",[n("code",[t._v("toFloat()")])])]),t._v(" "),n("tr",[n("td",[t._v("const char*")]),t._v(" "),n("td",[t._v("userpointer")]),t._v(" "),n("td",[n("code",[t._v("to<const char*>()")])])]),t._v(" "),n("tr",[n("td",[t._v("const char[N]")]),t._v(" "),n("td",[t._v("N/A")]),t._v(" "),n("td",[t._v("compiler error")])]),t._v(" "),n("tr",[n("td",[t._v("char*")]),t._v(" "),n("td",[t._v("userpointer")]),t._v(" "),n("td",[n("code",[t._v("to<char*>()")])])]),t._v(" "),n("tr",[n("td",[t._v("ssq::Object")]),t._v(" "),n("td",[t._v("anything")]),t._v(" "),n("td",[t._v("You can't convet ssq::Object to ssq::Object 😄")])]),t._v(" "),n("tr",[n("td",[t._v("ssq::Function")]),t._v(" "),n("td",[t._v("closure/nativeclosure")]),t._v(" "),n("td",[n("code",[t._v("toFunction()")])])]),t._v(" "),n("tr",[n("td",[t._v("ssq::Class")]),t._v(" "),n("td",[t._v("class")]),t._v(" "),n("td",[n("code",[t._v("toClass()")])])]),t._v(" "),n("tr",[n("td",[t._v("ssq::Instance")]),t._v(" "),n("td",[t._v("instance")]),t._v(" "),n("td",[n("code",[t._v("toInstance()")])])]),t._v(" "),n("tr",[n("td",[t._v("ssq::Table")]),t._v(" "),n("td",[t._v("table")]),t._v(" "),n("td",[n("code",[t._v("toTable()")])])]),t._v(" "),n("tr",[n("td",[t._v("ssq::Array")]),t._v(" "),n("td",[t._v("array")]),t._v(" "),n("td",[n("code",[t._v("toArray()")])])]),t._v(" "),n("tr",[n("td",[t._v("void*")]),t._v(" "),n("td",[t._v("userpointer")]),t._v(" "),n("td",[n("code",[t._v("to<void*>()")])])]),t._v(" "),n("tr",[n("td",[t._v("any pointer to class "),n("strong",[t._v("not added to VM via addClass")])]),t._v(" "),n("td",[t._v("userpointer")]),t._v(" "),n("td",[n("code",[t._v("to<Class_Type*>()")])])]),t._v(" "),n("tr",[n("td",[t._v("any reference (or copy) to class "),n("strong",[t._v("not added to VM via addClass")])]),t._v(" "),n("td",[t._v("userdata")]),t._v(" "),n("td",[n("code",[t._v("to<Class_Type>()")])])]),t._v(" "),n("tr",[n("td",[t._v("pointer to class")]),t._v(" "),n("td",[t._v("instance")]),t._v(" "),n("td",[n("code",[t._v("to<Class_Type*>()")])])]),t._v(" "),n("tr",[n("td",[t._v("reference or copy to class")]),t._v(" "),n("td",[t._v("instance")]),t._v(" "),n("td",[n("code",[t._v("to<Class_Type>()")])])])])])},function(){var t=this,s=t.$createElement,n=t._self._c||s;return n("p",[t._v("Some types are divided into 32-bit and 64-bit groups. This is due to the fact how Squirrel handles integers.\nOn 64-bit compiler, the integer is stored as "),n("code",[t._v("long long")]),t._v(", on 32-bit compiler, it is stored as "),n("code",[t._v("long")]),t._v(". Therefore\nin order to pass "),n("code",[t._v("long long")]),t._v(" into squirrel on 32-bit compiler, it will be converted into userdata. We can't\nstore 64-bit integer in 32-integer. Conversion to userdata is done to preserve the information. On 64-bit compiler\nthis is simply an integer. Floats are also stored as float on 32-bit compiler and double on 64-bit compiler.\n"),n("strong",[t._v("Getting double from ssq::Object on 32-bit compiler will result in loss of information!")])])},function(){var t=this.$createElement,s=this._self._c||t;return s("p",[this._v("Also, unsigned types are converted into signed types. For example, passing 0xFFFFFFFF (the max value of\nunsigned long) will be represented in squirrel as -1. However, when you try to get the -1 from Squirrel\nback to C++ and you convert the function call result (from ssq::Object) to "),s("code",[this._v("to<unsigned long>()")]),this._v(" it\nwill be exactly the same as previously, the 0xFFFFFFFF. Information is always preserved, nothing is lost.\nTherefore I highly suggest to use signed integers only.")])},function(){var t=this.$createElement,s=this._self._c||t;return s("p",[this._v("Passing instance of classes as copy (or reference) will result in copy of the class\nand the life of the instance will be handled by Squirrel. Passing any instance of class as a pointer\nwill "),s("strong",[this._v("not")]),this._v(" create a copy and Squirrel will not handle the life of the instance.")])},function(){var t=this.$createElement,s=this._self._c||t;return s("p",[this._v("If you create a C++ method where you create new instance of class and you return it as a pointer,\n(example: "),s("code",[this._v("return new Foo(123, 456);")]),this._v("), the Squirrel will be able to access the methods and manipulate the\nobject. However, it will never be released unless you do it manually from C++ side (by tracking your\nallocated objects).")])},function(){var t=this.$createElement,s=this._self._c||t;return s("p",[this._v("If you return stack allocated object (example: "),s("code",[this._v("return Foo(123, 456);")]),this._v(") the Squirrel will create\na copy of the object and the life of the given object will be also handled by Squirrel.")])},function(){var t=this,s=t.$createElement,n=t._self._c||s;return n("div",{staticClass:"language-cpp extra-class"},[n("pre",{pre:!0,attrs:{class:"language-cpp"}},[n("code",[t._v("ssq"),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("::")]),t._v("Function mySquirrelFunc "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" vm"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("findFunc")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token string"}},[t._v('"mySquirrelFunc"')]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\nssq"),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("::")]),t._v("Object result "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" vm"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("call")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("mySquirrelFunc"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" vm"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\nFoo copy "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" result"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("to"),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v("Foo"),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])])},function(){var t=this,s=t.$createElement,n=t._self._c||s;return n("div",{staticClass:"language-cpp extra-class"},[n("pre",{pre:!0,attrs:{class:"language-cpp"}},[n("code",[t._v("ssq"),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("::")]),t._v("Function mySquirrelFunc "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" vm"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("findFunc")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token string"}},[t._v('"mySquirrelFunc"')]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\nssq"),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("::")]),t._v("Object result "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" vm"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("call")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("mySquirrelFunc"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" vm"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\nFoo"),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v(" copy "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" result"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("to"),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v("Foo"),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])])},function(){var t=this,s=t.$createElement,n=t._self._c||s;return n("div",{staticClass:"language-cpp extra-class"},[n("pre",{pre:!0,attrs:{class:"language-cpp"}},[n("code",[n("span",{pre:!0,attrs:{class:"token macro property"}},[t._v("#"),n("span",{pre:!0,attrs:{class:"token directive keyword"}},[t._v("include")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token string"}},[t._v("<simplesquirrel/simplesquirrel.hpp>")])]),t._v("\n\n"),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("main")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    ssq"),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("::")]),t._v("VM "),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("vm")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("1024")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" ssq"),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("::")]),t._v("Libs"),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("::")]),t._v("ALL"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    ssq"),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("::")]),t._v("Script script "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" vm"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("compileSource")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    vm"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("run")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("script"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n    ssq"),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("::")]),t._v("Function mySquirrelFunc "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" vm"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("findFunc")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token string"}},[t._v('"mySquirrelFunc"')]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n    "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// Get the result of the function call")]),t._v("\n    ssq"),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("::")]),t._v("Object result "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" vm"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("call")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("mySquirrelFunc"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" vm"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("10")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("true")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" std"),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("::")]),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("string")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token string"}},[t._v('"Hello World"')]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n    "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// Check if the object is empty")]),t._v("\n    result"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("isEmpty")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// Returns true or false depending on what has been returned")]),t._v("\n\n    "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// Check if object is null")]),t._v("\n    result"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("isNull")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// True or false depending on what has been returned")]),t._v("\n\n    "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// Check if object is an integer")]),t._v("\n    "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("result"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("getType")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("==")]),t._v(" ssq"),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("::")]),t._v("Type"),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("::")]),t._v("INTEGER"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// Object is integer, we can convert it")]),t._v("\n        "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" myInt "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" result"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("toInt")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n        "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// or:")]),t._v("\n        "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("long")]),t._v(" myInt2 "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" result"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("to"),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("long")]),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n    "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// Converting to something else than the object contains")]),t._v("\n    "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// results in ssq::TypeException thrown")]),t._v("\n    "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("try")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        std"),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("::")]),t._v("string str "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" result"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("toString")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("catch")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("ssq"),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("::")]),t._v("TypeException"),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("&")]),t._v(" e"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        std"),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("::")]),t._v("cerr "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<<")]),t._v(" e"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("what")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<<")]),t._v(" std"),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("::")]),t._v("endl"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n    "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])])},function(){var t=this.$createElement,s=this._self._c||t;return s("h2",{attrs:{id:"binding-c-function"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#binding-c-function","aria-hidden":"true"}},[this._v("#")]),this._v(" Binding C++ function")])},function(){var t=this,s=t.$createElement,n=t._self._c||s;return n("div",{staticClass:"language-cpp extra-class"},[n("pre",{pre:!0,attrs:{class:"language-cpp"}},[n("code",[n("span",{pre:!0,attrs:{class:"token macro property"}},[t._v("#"),n("span",{pre:!0,attrs:{class:"token directive keyword"}},[t._v("include")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token string"}},[t._v("<simplesquirrel/simplesquirrel.hpp>")])]),t._v("\n\nstd"),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("::")]),t._v("string "),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("myCppFunc")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" a"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" b"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" std"),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("::")]),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("to_string")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("a "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),t._v(" b"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n"),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("main")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    ssq"),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("::")]),t._v("VM "),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("vm")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("1024")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" ssq"),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("::")]),t._v("Libs"),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("::")]),t._v("ALL"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n    "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// Bind global function")]),t._v("\n    vm"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("addFunc")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token string"}},[t._v('"myCppFunc"')]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" myCppFunc"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n    "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// Bind global function via std::function")]),t._v("\n    std"),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("::")]),t._v("function"),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v("std"),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("::")]),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("string")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" func "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" std"),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("::")]),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("bind")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("\n        myCppFunc"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" \n        std"),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("::")]),t._v("placeholders"),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("::")]),t._v("_1"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" \n        std"),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("::")]),t._v("placeholders"),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("::")]),t._v("_2\n    "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    vm"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("addFunc")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token string"}},[t._v('"myCppFunc2"')]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" func"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n    "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// Bind via lambda")]),t._v("\n    vm"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("addFunc")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v('"myCppFuncLambda'),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" a"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" b"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" std"),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("::")]),t._v("string "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" std"),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("::")]),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("to_string")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("a "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),t._v(" b"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n    "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])])},function(){var t=this.$createElement,s=this._self._c||t;return s("h2",{attrs:{id:"call-squirrel-global-function"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#call-squirrel-global-function","aria-hidden":"true"}},[this._v("#")]),this._v(" Call Squirrel global function")])},function(){var t=this.$createElement,s=this._self._c||t;return s("p",[this._v("First, you need to find the function you are looking for. This won't be done unless you\nfirst compile "),s("strong",[this._v("and run")]),this._v(" the script. Squirrel is a dynamic language, therefore the functions\nare evaulated at run time.")])},function(){var t=this,s=t.$createElement,n=t._self._c||s;return n("div",{staticClass:"language-cpp extra-class"},[n("pre",{pre:!0,attrs:{class:"language-cpp"}},[n("code",[n("span",{pre:!0,attrs:{class:"token macro property"}},[t._v("#"),n("span",{pre:!0,attrs:{class:"token directive keyword"}},[t._v("include")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token string"}},[t._v("<simplesquirrel/simplesquirrel.hpp>")])]),t._v("\n\nstd"),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("::")]),t._v("string "),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("myCppFunc")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" a"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" b"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" std"),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("::")]),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("to_string")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("a "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),t._v(" b"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n"),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("main")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    ssq"),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("::")]),t._v("VM "),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("vm")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("1024")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" ssq"),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("::")]),t._v("Libs"),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("::")]),t._v("ALL"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n    "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("static")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" std"),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("::")]),t._v("string source "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" \n    "),n("span",{pre:!0,attrs:{class:"token string"}},[t._v('"function mySquirrelFunc(a, b){\\n"')]),t._v("\n    "),n("span",{pre:!0,attrs:{class:"token string"}},[t._v('"    return a + b;\\n"')]),t._v("\n    "),n("span",{pre:!0,attrs:{class:"token string"}},[t._v('"}\\n"')]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n    ssq"),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("::")]),t._v("Script script "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" vm"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("compileSource")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("source"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("c_str")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    vm"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("run")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("script"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n    "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// Now the mySquirrelFunc is ready for us, let's")]),t._v("\n    "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// find it from VM")]),t._v("\n    ssq"),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("::")]),t._v("Function mySquirrelFunc "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" vm"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("findFunc")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token string"}},[t._v('"mySquirrelFunc"')]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n    "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// We can get the number of parameters required via:")]),t._v("\n    "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// mySquirrelFunc.getNumOfParams()")]),t._v("\n\n    "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// Call the function")]),t._v("\n    "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v('// The second parameter is the "this" pointer!')]),t._v("\n    "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// If the function was part of class (member function) then")]),t._v("\n    "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// the second parameter needs to be an instance object.")]),t._v("\n    "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// Since the mySquirrelFunc is global, we will pass the")]),t._v("\n    "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// root table -> the VM instance.")]),t._v("\n    ssq"),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("::")]),t._v("Object result "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" vm"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("call")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("mySquirrelFunc"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" vm"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("10")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("20")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n    "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// We have the result and we can check its type via:")]),t._v("\n    "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// result.getType() which returns ssq::Type enum")]),t._v("\n    "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// Or get the type as const char*")]),t._v("\n    "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// result.getTypeStr()")]),t._v("\n\n    "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// Convert the result to integer")]),t._v("\n    "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" myInt "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" result"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("toInt")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n    std"),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("::")]),t._v("cout "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<<")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token string"}},[t._v('"mySquirrelFunc returned: "')]),t._v(" "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<<")]),t._v(" myInt "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<<")]),t._v(" std"),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("::")]),t._v("endl"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n    "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])])},function(){var t=this.$createElement,s=this._self._c||t;return s("h2",{attrs:{id:"bind-c-class"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#bind-c-class","aria-hidden":"true"}},[this._v("#")]),this._v(" Bind C++ class")])},function(){var t=this.$createElement,s=this._self._c||t;return s("p",[this._v("Binding of classes is done via "),s("code",[this._v("ssq::VM::addClass(...)")]),this._v(". You have to expose your class to VM. Otherwise\nany of your classes will be passed around in squirrel as user data and not as an instance.")])},function(){var t=this.$createElement,s=this._self._c||t;return s("p",[this._v("You don't need to expose your class if you do not wish to use it in Squirrel as an instance. Any\nclasses or any types that are not integers, strings, booleans, will be automatically converted into\nSquirrel user data. User data can be moved around, pushed to Squirrel or returned from. User data\ncannot be manipulated, has no methods, and is created via copy. For example, you won't be able\nto use "),s("code",[this._v("std::unique_ptr")]),this._v(" as userdata because it does not allow a copy.")])},function(){var t=this,s=t.$createElement,n=t._self._c||s;return n("div",{staticClass:"language-cpp extra-class"},[n("pre",{pre:!0,attrs:{class:"language-cpp"}},[n("code",[n("span",{pre:!0,attrs:{class:"token macro property"}},[t._v("#"),n("span",{pre:!0,attrs:{class:"token directive keyword"}},[t._v("include")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token string"}},[t._v("<simplesquirrel/simplesquirrel.hpp>")])]),t._v("\n\n"),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("class")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Foo")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("public")]),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v("\n    "),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("Foo")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" std"),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("::")]),t._v("string"),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("&")]),t._v(" msg"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("msg")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("msg"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n    "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" std"),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("::")]),t._v("string"),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("&")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("getMsg")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" msg"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n    "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("void")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("setMsg")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" std"),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("::")]),t._v("string"),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("&")]),t._v(" msg"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("this")]),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v("msg "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" msg"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n    "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("static")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("void")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("expose")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("ssq"),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("::")]),t._v("VM"),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("&")]),t._v(" vm"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        ssq"),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("::")]),t._v("Class "),n("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("cls")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" vm"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("addClass")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token string"}},[t._v('"Foo"')]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" ssq"),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("::")]),t._v("Class"),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("::")]),t._v("Ctor"),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("Foo")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("std"),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("::")]),t._v("string"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n        "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// You can also use lambdas (or std::function) to define constructor")]),t._v("\n        "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// The function has to return pointer to the new instance")]),t._v("\n        "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//")]),t._v("\n        "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v('// vm.addClass("Foo", [](std::string msg) -> Foo* {')]),t._v("\n        "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//     return new Foo(msg);")]),t._v("\n        "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// });")]),t._v("\n\n        cls"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("addFunc")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token string"}},[t._v('"getMsg"')]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("&")]),t._v("Foo"),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("::")]),t._v("getMsg"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n        cls"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("addFunc")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token string"}},[t._v('"setMsg"')]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("&")]),t._v("Foo"),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("::")]),t._v("setMsg"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n        cls"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("addVar")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token string"}},[t._v('"msg"')]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("&")]),t._v("Foo"),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("::")]),t._v("msg"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n    "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// For the purpose of this example we will treat msg as public")]),t._v("\n    "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// so we can expose it via cls.addVar")]),t._v("\n    std"),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("::")]),t._v("string msg"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n"),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("main")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    ssq"),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("::")]),t._v("VM "),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("vm")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("1024")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" ssq"),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("::")]),t._v("Libs"),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("::")]),t._v("ALL"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n    "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("static")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" std"),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("::")]),t._v("string source "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" \n    "),n("span",{pre:!0,attrs:{class:"token string"}},[t._v('"// Create instance\\n"')]),t._v("\n    "),n("span",{pre:!0,attrs:{class:"token string"}},[t._v('"local foo = Foo(\\"Hello World\\");\\n"')]),t._v("\n    "),n("span",{pre:!0,attrs:{class:"token string"}},[t._v('"\\n"')]),t._v("\n    "),n("span",{pre:!0,attrs:{class:"token string"}},[t._v('"// Call C++ methods\\n"')]),t._v("\n    "),n("span",{pre:!0,attrs:{class:"token string"}},[t._v('"print(\\"Foo has message: \\" + foo.getMessage());\\n"')]),t._v("\n    "),n("span",{pre:!0,attrs:{class:"token string"}},[t._v('"foo.setMessage(\\"Something else\\");\\n"')]),t._v("\n    "),n("span",{pre:!0,attrs:{class:"token string"}},[t._v('"\\n"')]),t._v("\n    "),n("span",{pre:!0,attrs:{class:"token string"}},[t._v('"// Access the variable directly\\n"')]),t._v("\n    "),n("span",{pre:!0,attrs:{class:"token string"}},[t._v('"print(\\"Foo now has: \\" + foo.msg);\\n"')]),t._v("\n    "),n("span",{pre:!0,attrs:{class:"token string"}},[t._v('"\\n"')]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n    ssq"),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("::")]),t._v("Script script "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" vm"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("compileSource")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("source"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("c_str")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    Foo"),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("::")]),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("expose")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("vm"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// Bind the class to this VM")]),t._v("\n    vm"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("run")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("script"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n    "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])])},function(){var t=this.$createElement,s=this._self._c||t;return s("h2",{attrs:{id:"class-const-method-ambiguity"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#class-const-method-ambiguity","aria-hidden":"true"}},[this._v("#")]),this._v(" Class const method ambiguity")])},function(){var t=this,s=t.$createElement,n=t._self._c||s;return n("div",{staticClass:"language-cpp extra-class"},[n("pre",{pre:!0,attrs:{class:"language-cpp"}},[n("code",[n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("class")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Foo")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("\n    "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" std"),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("::")]),t._v("string"),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("&")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("getMessage")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    std"),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("::")]),t._v("string"),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("&")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("getMessage")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n    "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("static")]),t._v(" ssq"),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("::")]),t._v("Class "),n("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("expose")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("ssq"),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("::")]),t._v("VM"),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("&")]),t._v(" vm"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])])},function(){var t=this.$createElement,s=this._self._c||t;return s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[this._v('static void Foo::expose(ssq::VM& vm) {\n    ssq::Class cls = vm.addClass("Foo", ssq::Class::Ctor<Foo(.....)>());\n\n    // Explicitly define return type to "const std::string&" in order\n    // for the compiler to know which overloaded method to use.\n    cls.addFunc<const std::string&>("getMessage", &Foo::getMessage);\n}\n')])])])},function(){var t=this.$createElement,s=this._self._c||t;return s("h2",{attrs:{id:"find-squirrel-class-and-create-instance"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#find-squirrel-class-and-create-instance","aria-hidden":"true"}},[this._v("#")]),this._v(" Find Squirrel class and create instance")])},function(){var t=this,s=t.$createElement,n=t._self._c||s;return n("div",{staticClass:"language-cpp extra-class"},[n("pre",{pre:!0,attrs:{class:"language-cpp"}},[n("code",[n("span",{pre:!0,attrs:{class:"token macro property"}},[t._v("#"),n("span",{pre:!0,attrs:{class:"token directive keyword"}},[t._v("include")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token string"}},[t._v("<simplesquirrel/simplesquirrel.hpp>")])]),t._v("\n\n"),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("main")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    ssq"),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("::")]),t._v("VM "),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("vm")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("1024")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" ssq"),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("::")]),t._v("Libs"),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("::")]),t._v("ALL"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n    "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("static")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" std"),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("::")]),t._v("string source "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" \n    "),n("span",{pre:!0,attrs:{class:"token string"}},[t._v('"class Foo {\\n"')]),t._v("\n    "),n("span",{pre:!0,attrs:{class:"token string"}},[t._v('"    constructor(msg) {\\n"')]),t._v("\n    "),n("span",{pre:!0,attrs:{class:"token string"}},[t._v('"        value = msg;\\n"')]),t._v("\n    "),n("span",{pre:!0,attrs:{class:"token string"}},[t._v('"    }\\n"')]),t._v("\n    "),n("span",{pre:!0,attrs:{class:"token string"}},[t._v('"\\n"')]),t._v("\n    "),n("span",{pre:!0,attrs:{class:"token string"}},[t._v('"    function setMsg(msg) {\\n"')]),t._v("\n    "),n("span",{pre:!0,attrs:{class:"token string"}},[t._v('"        msg = value;\\n"')]),t._v("\n    "),n("span",{pre:!0,attrs:{class:"token string"}},[t._v('"    }\\n"')]),t._v("\n    "),n("span",{pre:!0,attrs:{class:"token string"}},[t._v('"\\n"')]),t._v("\n    "),n("span",{pre:!0,attrs:{class:"token string"}},[t._v('"    function getMsg() {\\n"')]),t._v("\n    "),n("span",{pre:!0,attrs:{class:"token string"}},[t._v('"        return msg;\\n"')]),t._v("\n    "),n("span",{pre:!0,attrs:{class:"token string"}},[t._v('"    }\\n"')]),t._v("\n    "),n("span",{pre:!0,attrs:{class:"token string"}},[t._v('"\\n"')]),t._v("\n    "),n("span",{pre:!0,attrs:{class:"token string"}},[t._v('"    value = null;\\n"')]),t._v("\n    "),n("span",{pre:!0,attrs:{class:"token string"}},[t._v('"}\\n"')]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n    ssq"),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("::")]),t._v("Script script "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" vm"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("compileSource")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("source"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("c_str")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    vm"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("run")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("script"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n    "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// Find class")]),t._v("\n    ssq"),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("::")]),t._v("Class "),n("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("cls")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" vm"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("findClass")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token string"}},[t._v('"Foo"')]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n    "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// Create instance of it.")]),t._v("\n    "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// The life of the object is determined by Squirrel.")]),t._v("\n    "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// You don't need to release the object yourself.")]),t._v("\n    ssq"),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("::")]),t._v("Instance clsInstance "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" vm"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("newInstance")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("cls"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" std"),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("::")]),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("string")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token string"}},[t._v('"Hello World!"')]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n    "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// Find class methods")]),t._v("\n    ssq"),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("::")]),t._v("Function funcSetMsg "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" cls"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("findFunc")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token string"}},[t._v('"setMsg"')]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    ssq"),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("::")]),t._v("Function funcGetMsg "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" cls"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("findFunc")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token string"}},[t._v('"getMsg"')]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n    "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// Call method, set new message")]),t._v("\n    vm"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("callFunc")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("funcSetMsg"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" clsInstance"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token string"}},[t._v('"Banana"')]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n    "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// Get the message back")]),t._v("\n    std"),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("::")]),t._v("string result "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" vm"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("callFunc")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("funcGetMsg"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" clsInstance"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("toString")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n    std"),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("::")]),t._v("cout "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<<")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token string"}},[t._v('"Foo now contains: "')]),t._v(" "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<<")]),t._v(" result "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<<")]),t._v(" std"),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("::")]),t._v("endl"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n    "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])])},function(){var t=this.$createElement,s=this._self._c||t;return s("h2",{attrs:{id:"manipulate-squirrel-array"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#manipulate-squirrel-array","aria-hidden":"true"}},[this._v("#")]),this._v(" Manipulate Squirrel array")])},function(){var t=this,s=t.$createElement,n=t._self._c||s;return n("div",{staticClass:"language-cpp extra-class"},[n("pre",{pre:!0,attrs:{class:"language-cpp"}},[n("code",[n("span",{pre:!0,attrs:{class:"token macro property"}},[t._v("#"),n("span",{pre:!0,attrs:{class:"token directive keyword"}},[t._v("include")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token string"}},[t._v("<simplesquirrel/simplesquirrel.hpp>")])]),t._v("\n\n"),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("main")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    ssq"),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("::")]),t._v("VM "),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("vm")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("1024")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" ssq"),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("::")]),t._v("Libs"),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("::")]),t._v("ALL"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    ssq"),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("::")]),t._v("Script script "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" vm"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("compileSource")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    vm"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("run")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("script"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n    "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// Create new array")]),t._v("\n    ssq"),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("::")]),t._v("Array arr "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" vm"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("newArray")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n    "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// To get the size of the array use: arr.size() ")]),t._v("\n\n    "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// Push at the back ")]),t._v("\n    "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// You can push any object you want. No limits.")]),t._v("\n    arr"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("push")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("std"),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("::")]),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("string")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token string"}},[t._v('"Hello World"')]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    arr"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("push")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("true")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    arr"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("push")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("123")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n    "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// You can retrieve individual indexes via:")]),t._v("\n    std"),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("::")]),t._v("string first "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" arr"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("get"),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v("std"),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("::")]),t._v("string"),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n    "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// If you want raw object (ssq::Object) do it as:")]),t._v("\n    ssq"),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("::")]),t._v("Object firstRaw "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" arr"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("get"),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v("ssq"),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("::")]),t._v("Object"),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n    "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// Use pop to release last element")]),t._v("\n    "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" arr"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("popAndGet"),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n    "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// If you do not want to get the last element while removing it")]),t._v("\n    "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// use the following:")]),t._v("\n    arr"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("pop")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// Returns nothing")]),t._v("\n\n    "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// Then, simply pass it into any squirrel function as any other value")]),t._v("\n    ssq"),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("::")]),t._v("Function mySquirrelFunc "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" vm"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("findFunc")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token string"}},[t._v('"mySquirrelFunc"')]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    vm"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("call")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("mySquirrelFunc"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" vm"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" arr"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n    "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// If you want to retrieve array from squirrel function,")]),t._v("\n    "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// you can do it simply by converting the return value to array:")]),t._v("\n    ssq"),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("::")]),t._v("Array result "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" vm"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("call")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" vm"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("toArray")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n    "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])])},function(){var t=this.$createElement,s=this._self._c||t;return s("h2",{attrs:{id:"manipulate-squirrel-table"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#manipulate-squirrel-table","aria-hidden":"true"}},[this._v("#")]),this._v(" Manipulate Squirrel table")])},function(){var t=this,s=t.$createElement,n=t._self._c||s;return n("div",{staticClass:"language-cpp extra-class"},[n("pre",{pre:!0,attrs:{class:"language-cpp"}},[n("code",[n("span",{pre:!0,attrs:{class:"token macro property"}},[t._v("#"),n("span",{pre:!0,attrs:{class:"token directive keyword"}},[t._v("include")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token string"}},[t._v("<simplesquirrel/simplesquirrel.hpp>")])]),t._v("\n\n"),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("main")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    ssq"),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("::")]),t._v("VM "),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("vm")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("1024")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" ssq"),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("::")]),t._v("Libs"),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("::")]),t._v("ALL"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    ssq"),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("::")]),t._v("Script script "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" vm"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("compileSource")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    vm"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("run")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("script"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n    "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// Create new table")]),t._v("\n    ssq"),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("::")]),t._v("Table table "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" vm"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("newTable")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n    "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// To get the size of the table use: table.size() ")]),t._v("\n\n    "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// Add new indexes via key-value pairs")]),t._v("\n    "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// You can add any object you want. No limits.")]),t._v("\n    table"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("set")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token string"}},[t._v('"myString"')]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" std"),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("::")]),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("string")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token string"}},[t._v('"Hello World"')]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    table"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("set")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token string"}},[t._v('"myBool"')]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("true")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    table"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("set")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token string"}},[t._v('"myInt"')]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("123")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n    "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// You can retrieve individual indexes via:")]),t._v("\n    std"),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("::")]),t._v("string first "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" table"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("get"),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v("std"),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("::")]),t._v("string"),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token string"}},[t._v('"myString"')]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n    "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// If you want raw object (ssq::Object) do it as:")]),t._v("\n    ssq"),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("::")]),t._v("Object firstRaw "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" table"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("get"),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v("ssq"),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("::")]),t._v("Object"),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token string"}},[t._v('"myString"')]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n    "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// Then, simply pass it into any squirrel function as any other value")]),t._v("\n    ssq"),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("::")]),t._v("Function mySquirrelFunc "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" vm"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("findFunc")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token string"}},[t._v('"mySquirrelFunc"')]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    vm"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("call")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("mySquirrelFunc"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" vm"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" table"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n    "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// If you want to retrieve table from squirrel function,")]),t._v("\n    "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// you can do it simply by converting the return value to table:")]),t._v("\n    ssq"),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("::")]),t._v("Table result "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" vm"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("call")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" vm"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("toTable")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n    "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])])},function(){var t=this.$createElement,s=this._self._c||t;return s("h2",{attrs:{id:"weak-references-and-callbacks"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#weak-references-and-callbacks","aria-hidden":"true"}},[this._v("#")]),this._v(" Weak references and callbacks")])},function(){var t=this.$createElement,s=this._self._c||t;return s("p",[this._v("There is a problem when you want to register a callback into C++ side. For example,\nyou have a GUI widget that has onClick method. But, the onClick method accepts "),s("code",[this._v("std::function")]),this._v("\nand not Squirrel objects. So, you will probably try to do the following:")])},function(){var t=this,s=t.$createElement,n=t._self._c||s;return n("div",{staticClass:"language-cpp extra-class"},[n("pre",{pre:!0,attrs:{class:"language-cpp"}},[n("code",[n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// This will cause undefined behavior! Most likely SEGFAULT! See another example below...")]),t._v("\nfooClass"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("addFunc")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token string"}},[t._v('"setOnClickCallback"')]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("Foo"),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v(" self"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" ssq"),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("::")]),t._v("Function func"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" ssq"),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("::")]),t._v("Instance inst"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("void")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// Using ssq::Instance here is OK!")]),t._v("\n    "),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("doSomethingElse")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("inst"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n    self"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("setOnClick")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("SomeEventData data"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// Using ssq::Instance in here nested lambda with [=] capture is bad!")]),t._v("\n        vm"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("callFunc")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("func"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" inst"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" data"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// On program exit...")]),t._v("\nSEGFAULT\n")])])])},function(){var t=this.$createElement,s=this._self._c||t;return s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[this._v('class Bar extends Foo {\n    ...\n}\n\nlocal bar = Bar(...);\nbaz.setOnClickCallback(function(data){\n    print("I got some data!");\n}, bar);\n')])])])},function(){var t=this.$createElement,s=this._self._c||t;return s("p",[this._v("Why is this bad? Because the inner lambda captures the instance, it will cause to extend the\nlife of Foo object inside of Squirrel. When you try to destroy your VM, it will most likely cause\nto crash program. Squirrel tracks objects by reference so that when reference counter goes to zero,\nthe object is deleted. With the example above the ssq::Instance object will live inside of the lambda\ncapture, extending the life of the instance. The reference counter will always be +1. This problem\nonly happens when you use lambda capture inside of lambda as above.\n"),s("strong",[this._v("How to solve this? Use weak reference!")])])},function(){var t=this,s=t.$createElement,n=t._self._c||s;return n("div",{staticClass:"language-cpp extra-class"},[n("pre",{pre:!0,attrs:{class:"language-cpp"}},[n("code",[n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// This will NOT cause any problems")]),t._v("\nfooClass"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("addFunc")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token string"}},[t._v('"setOnClickCallback"')]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("Foo"),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v(" self"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" ssq"),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("::")]),t._v("Function func"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" SqWeakRef ref"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("void")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    self"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("setOnClick")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("SomeEventData data"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        vm"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("callFunc")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("func"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" ref"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" data"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// On program exit...")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// All ok... No SEGFAULT")]),t._v("\n")])])])},function(){var t=this.$createElement,s=this._self._c||t;return s("p",[this._v("With the weak reference, the life of the instance won't be extended. The weak reference does\nnot increament the reference counter at all. It does not matter for how long the lambda captured\nvariable (the "),s("code",[this._v("ref")]),this._v(" parameter) will live, it won't affect us at all.")])}],!1,null,null,null);e.options.__file="README.md";s.default=e.exports}}]);